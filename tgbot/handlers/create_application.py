from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.markdown import hlink

from tgbot.config import Config
from tgbot.keyboards.inline import back_to_manu_kb, accept_create_app_kb
from tgbot.keyboards.reply import close_support_chat_kb
from tgbot.misc.states import States
from tgbot.misc.tools import check_time_status
from tgbot.models.db_commands import select_client, create_app, create_messages, get_not_online_message

application_router = Router()
application_router.message.filter(F.chat.type == 'private')


@application_router.callback_query(F.data == "create_application")
async def back_to_manu(call: CallbackQuery, state: FSMContext):
    await state.set_state(States.text)
    await call.message.edit_text(text='\n'.join([
        f'–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º –Ω–∏–∂–µ. üëá\n',
        f'–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ! –§–æ—Ç–æ, –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –ø–æ –∂–µ–ª–∞–Ω–∏—é –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.'
    ]), reply_markup=await back_to_manu_kb())


@application_router.message(States.text)
async def set_fcs(message: Message, state: FSMContext):
    user = await select_client(message.chat.id)
    await state.set_state(None)
    await state.update_data(text=message.text)
    await message.answer(text='\n'.join([
        f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ: \n'
        f'–ö–æ–º–ø–∞–Ω–∏—è: {user.company}',
        f'–§–ò–û: {user.fcs}',
        f'–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏: {message.text}'
    ]), reply_markup=await accept_create_app_kb())


@application_router.callback_query(F.data == "accept_create_app")
async def accept_create_app(call: CallbackQuery, state: FSMContext, bot: Bot, config: Config):
    data = await state.get_data()
    user = await select_client(call.message.chat.id)
    if call.from_user.username:
        username = f"(@{call.from_user.username})"
    else:
        username = f''
    app = await create_app(user, data.get("text"))
    topic = await bot.create_forum_topic(config.misc.chat_support, name=f'–ó–∞—è–≤–∫–∞ ‚Ññ{app.pk}')
    await create_messages('user', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({call.from_user.full_name})', app, 'text', data.get("text"))
    await bot.send_message(
        chat_id=config.misc.chat_support,
        text='\n'.join([
            f'üìß {hlink(f"{call.from_user.full_name} {username}", call.from_user.url)}',
            f'–ö–æ–º–ø–∞–Ω–∏—è: {user.company}',
            f'–§–ò–û: {user.fcs}',
            f'–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏: {data.get("text")}'
        ]), message_thread_id=topic.message_thread_id)
    app.message_thread_id = topic.message_thread_id
    app.save()
    await state.update_data(app_id=app.pk)
    await call.message.delete()
    await state.set_state(States.dialog)
    await call.message.answer(text='\n'.join([
        f'–ó–∞—è–≤–∫–∞ ‚Ññ{app.pk} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä '
    ]), reply_markup=await close_support_chat_kb())

    status = await check_time_status()
    if not status:
        not_online_message = await get_not_online_message()
        await call.message.answer(text=not_online_message)
        await create_messages('admin', f'–ê–¥–º–∏–Ω (–ë–û–¢)', app, 'text', not_online_message)
